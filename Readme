Задача:

1. Разработать профиль нагрузки для системы
- Я представляю нашу систему как агрегатор для сбора данных о погоде в разных городах, поэтому основной поток запросов будет GET /Forecast/{cityId} около 85% всех запросов.
Реже будет вызываться список городов GET /Cities 15%.

2. Реализовать профиль на любом инструменте НТ (разработать скрипт)
- Скрипт weatherapi.py , инструмент locust

3. Задать нефункциональные требования по производительности к системе (SLO/SLA)
- Время ответа сервиса < 5 секунд

4. Найти максимальную производительность системы
- Максимальная производительность достигается при нагрузке 150 пользователей

5. Написать краткий вывод: где достигнута максимальная производительность, где узкое место в системе, для подтверждения привести графики.
- Проведенные тесты, и результаты:
250 пользователей , 2 реплики приложения : через 4 минуты пошли ошибки, отваливалилась одна реплика (report_250users_2replicas.html)
200 пользователей , 2 реплики приложения : через 5 минуты пошли ошибки, отваливалилась одна реплика (report_200users_2replicas.html)
180 пользователей , 2 реплики приложения : через 19 минуты пошли ошибки, отваливалилась одна реплика (report_180users_2replicas.html)
200 пользователей , 4 реплики приложения : через 4 минуты пошли ошибки, отваливалилась одна реплика (report_200users_4replicas.html)
150 пользователей , 2 реплики приложения : стабильный тест 53 минут, найдена максимальная производительность приложения (report_150users_2replicas.html)

Вывод: Максимальная производительность найдена при нагрузке в 150 пользователей. При этом количество реплик не оказывает ключевую роль на производительность.
Для более глубоких выводом об узком месте, нужен доступ к метрикам комунального ingress и коду приложения.
По доступным метрикам каких-то критических превышений ресурсов не было выявлено.
